{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/measurements-card/measurements-card.component.ts","webpack:///src/app/measurements-card/measurements-card.component.html","webpack:///src/app/network.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","MeasurementsCardComponent","networkService","ultimaLeitura","initialChartData","chartConfig","type","columnNames","data","options","chartArea","width","height","backgroundColor","colors","pointSize","fontName","fontSize","hAxis","textPosition","textStyle","color","baselineColor","vAxis","minValue","maxValue","animation","startup","duration","legend","position","tooltip","ignoreBounds","isHtml","setInterval","fetchData","update_interval","graph_options","measurement","titulo","pathDaImagem","header_img","descricao","description","route","response","buscarDadosNoServidor","subscribe","updateGraphData","graph_data","length","NetworkService","http","url","server_url","get","providedIn","environment","production","sp02","hearthate","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'oximetro';\n}\n","<div class=\"toolbar\">\n  <img src=\"../assets/oximetro_128x128.png\" alt=\"Ícone de oxímetro\">\n  <span class=\"titulo\">Sistema Oxímetro IoT</span>\n</div>\n\n<div class=\"measurements-cards-grid\">\n  <app-measurements-card\n    measurement=\"sp02\">\n  </app-measurements-card>\n  <app-measurements-card\n    measurement=\"hearthate\">\n  </app-measurements-card>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\n\nimport { GoogleChartsModule } from 'angular-google-charts';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MeasurementsCardComponent } from './measurements-card/measurements-card.component';\n\nimport { NetworkService } from './network.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MeasurementsCardComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    GoogleChartsModule\n  ],\n  providers: [\n    NetworkService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { NetworkService } from './../network.service';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n\n@Component({\n  selector: 'app-measurements-card',\n  templateUrl: './measurements-card.component.html',\n  styleUrls: ['./measurements-card.component.css']\n})\nexport class MeasurementsCardComponent implements OnInit {\n  public titulo: string;\n  public pathDaImagem: string;\n  public descricao: string;\n  public ultimaLeitura = 0;\n  public initialChartData: Array<Array<any>> = [\n    [ 0, 0 ]\n  ];\n  public chartConfig = {\n    title: 'Area Chart',\n    type: 'AreaChart',\n    columnNames: ['Data', '<Medida>'],\n    data: this.initialChartData,\n    options: {\n      chartArea: {\n        width: '80%',\n        height: '80%'\n      },\n      backgroundColor: '#efefef',\n      colors: ['#82b1ff'],\n      pointSize: 6,\n      fontName: 'Roboto',\n      fontSize: 14,\n      hAxis: {\n        textPosition: 'none',\n        textStyle: {\n          color: 'black',\n        },\n        baselineColor: 'black'\n      },\n      vAxis: {\n        minValue: 0,\n        maxValue: 100,\n        textStyle: {\n          color: 'black',\n        },\n        baselineColor: 'black'\n      },\n      animation: {\n        startup: true,\n        duration: 1000\n      },\n      legend: {\n        position: 'none',\n        textStyle: {\n          color: 'black',\n        }\n      },\n      tooltip: {\n        ignoreBounds: false,\n        isHtml: false\n      }\n    }\n  };\n\n  @Input() measurement: string;\n\n  private response: Observable<object>;\n\n  constructor(\n    private networkService: NetworkService) {\n      setInterval(() => this.fetchData(), 1000 * 60 * environment.update_interval);\n     }\n\n  ngOnInit(): void {\n      const options = environment.graph_options[this.measurement];\n      this.titulo = options.title;\n      this.pathDaImagem = options.header_img;\n      this.descricao = options.description;\n      this.chartConfig.columnNames = ['Data', this.titulo];\n      this.fetchData();\n  }\n\n  fetchData() {\n    // Busca dados de medição no banco de dados.\n    const route = 'busca_dados_para_grafico/' + this.measurement;\n    this.response = this.networkService.buscarDadosNoServidor(route);\n    this.response.subscribe((data: {graph_data: []}) => {\n      this.updateGraphData(data);\n    });\n  }\n\n  updateGraphData(data: {graph_data: []}) {\n    if ( data.graph_data.length === 0 ) {\n      this.chartConfig.data = this.initialChartData;\n    } else {\n      this.chartConfig.data = data.graph_data;\n    }\n  }\n\n}\n","<div class=\"card\">\n  <div class=\"header\">\n    <span class=\"header-image\">\n      <img class=\"header-image\" [src]=\"pathDaImagem\" [alt]=\"descricao\">\n    </span>\n    <span class=\"titulo\">{{titulo}}</span>\n  </div>\n  <!-- Gráfico de série temporal das medições -->\n  <div class=\"content\">\n    <google-chart\n      [type]=\"chartConfig.type\"\n      [data]=\"chartConfig.data\"\n      [columns]=\"chartConfig.columnNames\"\n      [options]=\"chartConfig.options\"\n      dynamicResize=\"true\"\n      width=\"100%\">\n    </google-chart>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NetworkService {\n\n  constructor(private http: HttpClient) {}\n\n  buscarDadosNoServidor(route: string) {\n    const url = environment.server_url + route;\n    return this.http.get(url);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  server_url: 'http://0.0.0.0:8080/',\n  update_interval: 5, // Tempo de atualização em minutos\n\n  graph_options: {\n    sp02: {\n      title: 'Saturação de Oxigênio',\n      header_img: '../../assets/sp02.png',\n      description: 'Icone de Saturação de Oxigênio'\n    },\n    hearthate: {\n      title: 'Frequência Cardíaca',\n      header_img: '../../assets/hearthate.png',\n      description: 'Icone de Frequência Cardíaca'\n    }\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}